checkForCookie:
  switch:
    - condition: ${incoming.headers.cookie == null || incoming.headers.cookie == ""}
      next: returnUnauthorized
  next: extractRequestData

extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
  next: checkIfAuthorized

checkIfAuthorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authorityResult
  next: checkAuthorityResult

checkAuthorityResult:
  switch:
    - condition: ${authorityResult !== "false"}
      next: assign_values
  next: returnUnauthorized

assign_values:
  assign:
    parameters: ${incoming.body}
  next: getIntentsWithName

getIntentsWithName:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/intents/_search/template"
    body:
      id: "intent-with-name"
      params: ${params}
  result: getIntentsResult
  next: mapIntentsData

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-intent-with-name"
    body:
      hits: ${getIntentsResult.response.body.hits.hits}
  result: intentsData
  next: returnSuccess

returnSuccess:
  return: ${intentsData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
