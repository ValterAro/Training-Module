checkForCookie:
  switch:
    - condition: ${incoming.headers.cookie == null || incoming.headers.cookie == ""}
      next: returnUnauthorized
  next: extractRequestData

extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
  next: checkIfAuthorized

checkIfAuthorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authorityResult
  next: checkAuthorityResult

checkAuthorityResult:
  switch:
    - condition: ${authorityResult !== "false"}
      next: assign_values
  next: returnUnauthorized

assign_values:
  assign:
    parameters: ${incoming.body}

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
  result: fileLocations

getRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
  result: regexFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json"
    body:
      file: ${regexFile.response.body.file}
  result: regexData

mapRegexesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-regex-with-regex"
    body:
      regexes: ${regexData.response.body.nlu}
      regex_name: ${parameters.regex_name}
  result: regexesData

validateRegexExists:
  switch:
    - condition: ${regexesData.response.body.data.regex.includes(parameters.regex_name)}
      next: mapRegexInput
  next: returnRegexIsMissing

mapRegexInput:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-regex-file"
    body:
      regex: ${parameters.input.regex}
      examples: ${parameters.input.examples}
  result: mappedRegexInput

mergeRegexes:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge"
    body:
      array1: ${regexData.response.body.nlu}
      array2: ${mappedRegexInput.response.body.data}
      iteratee: "regex"
  result: mergedRegexes

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${mergedRegexes.response.body}
  result: regexYaml

saveRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
      content: ${regexYaml.response.body.json}
  result: fileResult
  next: updateRegexOpenSearch

updateRegexOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]:[#TRAINING_PIPELINE_PORT]/put/regexes/regex"
    body:
      input: ${regexYaml.response.body.json}
  result: returnSuccess

returnSuccess:
  return: "Regex updated"
  next: end

returnRegexIsMissing:
  return: "Can't find regex to update"
  status: 409
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
