checkForCookie:
  switch:
    - condition: ${incoming.headers.cookie == null || incoming.headers.cookie == ""}
      next: returnUnauthorized
  next: extractRequestData

extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
  next: checkIfAuthorized

checkIfAuthorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authorityResult
  next: checkAuthorityResult

checkAuthorityResult:
  switch:
    - condition: ${authorityResult !== "false"}
      next: getRulesData
  next: returnUnauthorized

getRulesData:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/rules/_search?size=10000"
  result: getRulesResult


getStoriesData:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/stories/_search?size=10000"
  result: getStoriesResult

getResponses:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/domain/_search?size=10000"
  result: getResponsesResult

mapResponsesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-responses"
    body:
      hits: ${getResponsesResult.response.body.hits.hits}
  result: responsesData

mapDependenciesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-responses-dependencies"
    body:
      rules: ${getRulesResult.response.body.hits.hits}
      stories: ${getStoriesResult.response.body.hits.hits}
      responses: ${responsesData.response.body.data.responses}
  result: dependenciesData

returnSuccess:
  return: ${dependenciesData.response.body.data}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
