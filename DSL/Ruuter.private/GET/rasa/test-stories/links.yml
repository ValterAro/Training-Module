checkForCookie:
  switch:
    - condition: ${incoming.headers.cookie == null || incoming.headers.cookie == ""}
      next: returnUnauthorized
  next: extractRequestData

extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
  next: checkIfAuthorized

checkIfAuthorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authorityResult
  next: checkAuthorityResult

checkAuthorityResult:
  switch:
    - condition: ${authorityResult !== "false"}
      next: getRules
  next: returnUnauthorized

getRules:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/rules/_search?size=10000"
  result: getRulesResult

getStories:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/stories/_search?size=10000"
  result: getStoriesResult

getTestStories:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/test-stories/_search?size=10000"
  result: getTestStoriesResult

mapLinksData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-links"
    body:
      rules: ${getRulesResult.response.body.hits.hits}
      stories: ${getStoriesResult.response.body.hits.hits}
      test-stories: ${getTestStoriesResult.response.body.hits.hits}
  result: linksData

returnSuccess:
  return: ${linksData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
