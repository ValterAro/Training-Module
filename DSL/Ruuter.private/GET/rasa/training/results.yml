checkForCookie:
  switch:
    - condition: ${incoming.headers.cookie == null || incoming.headers.cookie == ""}
      next: returnUnauthorized
  next: extractRequestData

extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
  next: checkIfAuthorized

checkIfAuthorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authorityResult
  next: checkAuthorityResult

checkAuthorityResult:
  switch:
    - condition: ${authorityResult !== "false"}
      next: getFileLocations
  next: returnUnauthorized

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
  result: fileLocations

getTrainingResultsDirectory:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read-directory"
    body:
      file_path: ${fileLocations.response.body.response.training_result_location}
  result: trainingResults

returnSuccess:
  return: ${trainingResults.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
